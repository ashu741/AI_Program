1. Design a LEX Code to count the number of lines, space, tab-meta character, and rest of characters in each Input pattern. 

%{
#include<stdio.h>
#include<string.h>
int lc = 0;
int ch = 0;
int tc = 0;
int sc = 0;
%}
%%
\n lc++;
([ ]) sc++;
\t tc++;
. ch++;
%%
int yywrap(void) {}   

int main()
{

	yylex(); 
	
	printf("Number of lines are %d\n",lc);
  	printf("Number of spaces are %d\n",sc);
	printf("Number of tabs are %d\n",tc);
  	printf("Number of characters are %d\n",ch);
  	
  	
	return 0;
}



2. Design a LEX Code to identify and print valid Identifier of C/C++ in given Input pattern.

%{
#include<stdio.h>
%}
%%
^[a-zA-Z_][a-zA-Z0-9_]* { printf("Identifier\n"); }
^[^a - zA - Z _].* {printf("Invalid Identifier\n");} 
%%
int yywrap(void) {}   

int main()
{
	
	yylex();      
	return 0;
}





3. Design a LEX Code to identify and print integer and float value in given Input pattern.

%{
#include<stdio.h>
%}
%%
[0-9]+"."[0-9]+ {printf("float\n");}
[0-9]+ {printf("Int\n");}
%%
int yywrap(void) {}   

int main()
{
	
	yylex();      
	return 0;
}





4. Design a LEX Code for Tokenizing (Identify and print OPERATORS, SEPERATORS, KEYWORDS, IDENTIFERS) the following C-fragment:
int p=1,d=0,r=4;
float m=0.0, n=200.0.
while (p <= 3){
	 if(d==0){
		 m= m+n*r+4.5; d++; 
	 }
	else{
		 r++; m=m+r+1000.0;  
	}
	p++;
 }


%{
#include<stdio.h>
%}
%%

auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|continue|for|signed|void|do|if|static|while|default|goto|sizeof|volatile|const|float|short {ECHO;printf(" KEYWORD\n");} 

[{};,()]  {ECHO; printf(":SEPERATOR\t");} 	

[+-/=*%]   {ECHO; printf(":OPERATOR\t");} 			

([a-zA-Z][0-9])+|[a-zA-Z]* {ECHO; printf(":Identifier\t");}  

.|\n;
%%

int yywrap(void){}

int main(){
	yylex();
	return 0;
}





5. Design a LEX Code to count and print the number of total characters, words, white spaces in given ‘Input.txt’ file.

%{
#include<stdio.h>
#include<string.h>
int ch = 0;
int sc = 0;
int words = 0;
%}

%%
([a-zA-Z0-9]*)  {words++; ch = ch +yyleng;}
([ ]) {sc++;}
[^\n]  {ch++;}
%%

int yywrap(void) {}   

int main()
{
	extern FILE *yyin,*yyout;
	
	yyin = fopen("Input.txt","r");
	yyout = fopen("Output.txt","w");
	yylex(); 
	fprintf(yyout,"Total words: %d\n",words);
	fprintf(yyout,"Total spaces: %d\n",sc);
	fprintf(yyout,"Total character: %d\n",ch);
	fclose(yyin);
  	fclose(yyout);     
	return 0;
}





6. Design a LEX Code to replace white spaces of ‘Input.txt’ file by a single blank character into ‘Output.txt’ file.

%{
#include<stdio.h>
%}

%%
[\t" "]+ fprintf(yyout," ");		
.|\n fprintf(yyout,"%s",yytext);	
%%

int yywrap(){}

int main(void)
{
yyin=fopen("Input.txt","r");		
yyout=fopen("Output.txt","w");

yylex();
return 0;
}





7. Design a LEX Code to remove the comments from any C-Program given at run-time and store into ‘out.c’ file.

%{
#include<stdio.h>
%}

%%
\/\/(.*) {};					
\/\*(.*\n)*.*\*\/  {};			
%%

int yywrap(){}


int main(){
yyin=fopen("input.c","r");
yyout=fopen("out.c","w");
yylex();
return 0;
}






8. Design a LEX Code to extract all html tags in the given HTML file at run time and store into Text file given at run time.

%{
#include<stdio.h>
%}

%%
\<[^>]*\> fprintf(yyout,"%s\n",yytext);
.|\n; 
%%

int yywrap(){}

int main()
{
yyin=fopen("input.html","r");
yyout=fopen("Output.txt","w");
yylex();
return 0;
}


9. DFA to accept string ending with 00.

%{
%}
%s A B DEAD
%%
<INITIAL>0 BEGIN A;
<INITIAL>1 BEGIN INITIAL;
<INITIAL>[^01\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<A>0 BEGIN B;
<A>1 BEGIN INITIAL;
<A>[^01\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<B>0 BEGIN B;
<B>1 BEGIN INITIAL;
<B>[^01\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("Accepted\n");} 
  
<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");} 
%%
int main(){
	printf("Enter String: \n");
	yylex();
	return 0;

}

10. DFA to accpet even number of 1s

%{
%}
%s A B DEAD
%%
<INITIAL>0 BEGIN A;
<INITIAL>1 BEGIN INITIAL;
<INITIAL>[^01\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<A>1 BEGIN B;
<A>0 BEGIN A;
<A>[^01\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<B>0 BEGIN A;
<B>1 BEGIN INITIAL;
<B>[^01\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("Accepted\n");} 
  
<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");} 
%%
int main(){
	printf("Enter String: \n");
	yylex();
	return 0;

}

11.  Ending with 01

%{
%}
%s A B DEAD
%%
<INITIAL>0 BEGIN A;
<INITIAL>1 BEGIN INITIAL;
<INITIAL>[^01\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<A>0 BEGIN A;
<A>1 BEGIN B;
<A>[^01\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<B>0 BEGIN A;
<B>1 BEGIN INITIAL;
<B>[^01\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("Accepted\n");} 
  
<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");} 
%%
int main(){
	printf("Enter String: \n");
	yylex();
	return 0;

}


12. DFA starting with 11

%{
%}
%s A B DEAD
%%

<INITIAL>1 BEGIN A;
<INITIAL>[^1\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<A>1 BEGIN B;
<A>[^1\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<B>0 BEGIN B;
<B>1 BEGIN B;
<B>[^01\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("Accepted\n");} 
  
<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");} 
%%
int main(){
	printf("Enter String: \n");
	yylex();
	return 0;

}


13.  odd 1 and even 0

%{
%}
%s A B C DEAD
%%
<INITIAL>0 BEGIN A;
<INITIAL>1 BEGIN B;
<INITIAL>[^01\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}
  
<A>0 BEGIN INITIAL;
<A>1 BEGIN C;
<A>[^01\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("NOT Accepted\n");}
  
<B>0 BEGIN C;
<B>1 BEGIN INITIAL;
<B>[^01\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("Accepted\n");} 
  
<C>0 BEGIN B;
<C>1 BEGIN A;
<C>[^01\n] BEGIN DEAD;
<C>\n BEGIN INITIAL; {printf("Not Accepted\n");} 

  
<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");} 
%%
int main(){
	printf("Enter String: \n");
	yylex();
	return 0;

}


14. Design a DFA in LEX Code which accepts string containing even number of ‘a’ and
even number of ‘b’ over input alphabet {a, b}.
%{
%}
%s A B C DEAD
%%
<INITIAL>a BEGIN A;
<INITIAL>b BEGIN B;
<INITIAL>[^ab\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Accepted\n");}

<A>a BEGIN INITIAL;
<A>b BEGIN C;
<A>[^ab\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("NOT Accepted\n");}

<B>a BEGIN C;
<B>b BEGIN INITIAL;
<B>[^ab\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("NOT Accepted\n");}

<C>a BEGIN B;
<C>b BEGIN A;
<C>[^ab\n] BEGIN DEAD;
<C>\n BEGIN INITIAL; {printf("Not Accepted\n");}

<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");}
%%
int main(){
printf("Enter String: \n");
yylex();
return 0;
}

 

15. Design a DFA in LEX Code which accepts string containing third last element ‘a’
over input alphabet {a, b}.
%{
%}
%s A B C D E F G DEAD
%%
<INITIAL>a BEGIN A;
<INITIAL>b BEGIN INITIAL;
<INITIAL>[^ab\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}

<A>a BEGIN B;
<A>b BEGIN C;
<A>[^ab\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("NOT Accepted\n");}

<B>a BEGIN D;
<B>b BEGIN E;
<B>[^ab\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("NOT Accepted\n");}

<C>a BEGIN F;
<C>b BEGIN G;
<C>[^ab\n] BEGIN DEAD;
<C>\n BEGIN INITIAL; {printf("Not Accepted\n");}
<D>a BEGIN D;
<D>b BEGIN E;
<D>[^ab\n] BEGIN DEAD;
<D>\n BEGIN INITIAL; {printf("Accepted\n");}
<E>a BEGIN F;
<E>b BEGIN G;
<E>[^ab\n] BEGIN DEAD;
<E>\n BEGIN INITIAL; {printf("Accepted\n");}
<F>a BEGIN B;
<F>b BEGIN C;
<F>[^ab\n] BEGIN DEAD;
<F>\n BEGIN INITIAL; {printf("Accepted\n");}
<G>a BEGIN A;
<G>b BEGIN INITIAL;
<G>[^ab\n] BEGIN DEAD;
<G>\n BEGIN INITIAL; {printf("Accepted\n");}

<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");}
%%
int main(){
printf("Enter String: \n");
yylex();
return 0;
}



16. Design a DFA in LEX Code to Identify and print Integer & Float Constants and
Identifier.
%{
%}
%s A B C DEAD
%%
<INITIAL>[0-9]+ BEGIN A;
<INITIAL>[0-9]+[.][0-9]+ BEGIN B;
<INITIAL>[A-Za-z_][A-Za-z0-9_]* BEGIN C;
<INITIAL>[^\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}
<A>[^\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("Integer\n");}
<B>[^\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("Float\n");}
<C>[^\n] BEGIN DEAD;
<C>\n BEGIN INITIAL; {printf("Identifier\n");}
<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");}
%%

int yywrap(){
return 1;
}
int main(){
printf("Enter String\n");
yylex();
return 0;
}
